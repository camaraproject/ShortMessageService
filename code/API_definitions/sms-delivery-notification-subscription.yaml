openapi: 3.0.3
info:
  title: SMS Delivery Notification Subscription
  description: |
    API to create, retrieve and delete event subscriptions related to a sms delivery operation performed on an associated phone number.

    # Introduction

    With this API, customers can create subscriptions for receiving delivery notification on the requests sent.
    
    The consumer id in the request gives the identity of the consumer for which call back notification subscription to be enabled.
    
    Upon successfully creating a subscription, the API will provide an Event Subscription ID, and it will indicate the subscription's expiration date.
    
    After delivering the SMS, the event subscriber will be notified back to the provided Notification-Url given by the subscription-request.
    
    SMS delivery notification API could be useful in scenarios such as:
    
    - Reconciliation (by the API consumer) on the number of messages sent vs delivered.

    # Relevant terms and definitions

    # API Functionality    

    The CAMARA subscription model is detailed in the CAMARA API design guideline document and follows CloudEvents specification.

    It is mandatory in the subscription to provide the event `type` for which the client would like to subscribe.  
    
    Following event ``type`` are managed for this API:
      - ``org.camaraproject.sms.v0.-status``  - Event triggered when the sms delivery task is completed by the server
        
    Note: Additionally to these list, ``org.camaraproject.sms.v0.subscription-ends`` notification `type` is sent when the subscription ends. 
    This notification does not require dedicated subscription. 

    It is used when:
      - the subscription expire time (optionally set by the requester) has been reached 
      - the maximum number of subscription events (optionally set by the requester) has been reached
      - the API server has to stop sending notification prematurely



    The API exposes following capabilities:
      * **/subscriptions**: This endpoint has two operations, one that allows to retrieve the list of SMS delivery event subscriptions and another one to create new event subscriptions.
      * **/subscriptions/{subscriptionId}**: This endpoint also has two operations, one that allows to retrieve a particular event subscription by id and another one to delete an event subscription also using the id.

    ## SMS delivery notification subscription

    Theses endpoints allow to manage notification subscription on Send SMS delivery event. 
    The CAMARA subscription model is detailed in the CAMARA API design guideline document and follows Cloudevents specification.

    It is mandatory in the subscription to provide the event `type` subscribed are several are managed in this API.

    Only one event ``type`` is managed for this API: 
      - ``org.camaraproject.sms.v0.sms-delivery-status`` - Event triggered when a sms delivery event occurs on the any request given by the consumer


  
    ### Notification callback

    This endpoint describes the event notification received on subscription listener side when the event occurred. As for subscription, detailed description of the event notification is provided in the CAMARA API design guideline document.

    **WARNING**: This callback endpoint must be exposed on the listener side as `POST /{$request.body#/webhook/notificationUrl}`
      will be posted by the sim swap resource server to the webhook url provided by notification 
      listener.

    # Authorization and authentication

    CAMARA guidelines defines a set of authorization flows which can grant API clients access to the API functionality, as outlined in the document [CAMARA-API-access-and-user-consent.md](https://github.com/camaraproject/IdentityAndConsentManagement/blob/main/documentation/CAMARA-API-access-and-user-consent.md). Which specific authorization flows are to be used will be determined during onboarding process, happening between the API Client and the Telco Operator exposing the API, taking into account the declared purpose for accessing the API, while also being subject to the prevailing legal framework dictated by local legislation.

    It is important to remark that in cases where personal user data is processed by the API, and users can exercise their rights through mechanisms such as opt-in and/or opt-out, the use of 3-legged access tokens becomes mandatory. This measure ensures that the API remains in strict compliance with user privacy preferences and regulatory obligations, upholding the principles of transparency and user-centric data control.

    # Further info and support

    (FAQs will be added in a later version of the documentation)

  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0-alpha.1
externalDocs:
  description: Product documentation at CAMARA
  url: https://github.com/camaraproject/sendsms
servers:
  - url: '{apiRoot}/sms-delivery-notification-subscriptions/v0alpha1'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
tags:
  - name: SMS delivery notification subscription
    description: Operation to manage event subscription on sms delivery event (swapped)

paths:
  /subscriptions:
    post:
      tags:
        - SMS delivery notification subscription
      summary: 'Create a sms delivery event subscription for a given consumer'
      description: Create a sms delivery event subscription for a given consumer
      operationId: createSubscription
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - openId:
          - sms-delivery:subscriptions:create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscription'
        required: true
      callbacks:
        notifications:
          "{$request.body#/sink}":
            post:
              tags:
                - Session notifications callback
              summary: "Session notifications callback"
              description: |
                Important: this endpoint is to be implemented by the API consumer.
                The sim swap server will call this endpoint whenever a swapped event occurs.
              operationId: postNotification
              parameters:
                - $ref: '#/components/parameters/x-correlator'
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/CloudEvent"
                    examples:
                      STATUS:
                        $ref: '#/components/examples/STATUS'
                      SUBSCRIPTION_ENDS:
                        $ref: '#/components/examples/SUBSCRIPTION_ENDS'  
              responses:
                "204":
                  description: Successful notification
                  headers:
                    x-correlator:
                      $ref: '#/components/headers/x-correlator'
                "400":
                  $ref: "#/components/responses/Generic400"
                "401":
                  $ref: "#/components/responses/Generic401"
                "403":
                  $ref: "#/components/responses/Generic403"
                "500":
                  $ref: "#/components/responses/Generic500"
                "503":
                  $ref: "#/components/responses/Generic503"
              security:
                - { }
                - notificationsBearerAuth: [ ]

      responses:
        "201":
          description: Created
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
        "202":
          description: Request accepted to be processed. It applies for async creation process.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionAsync'
        "400":
          $ref: '#/components/responses/Generic400'
        "401":
          $ref: '#/components/responses/Generic401'
        "403":
          $ref: '#/components/responses/Generic403'
        "409":
          $ref: '#/components/responses/Generic409'
        "500":
          $ref: '#/components/responses/Generic500'
        "503":
          $ref: '#/components/responses/Generic503'
    get:
      tags:
        - SMS delivery notification subscription
      summary: 'Retrieve a list of SMS Delivery event subscription'
      description: Retrieve a list of SMS Delivery event subscription(s)
      operationId: retrieveSubscriptionList
      parameters:
        - $ref: '#/components/parameters/x-correlator'
      security:
        - openId:
          - send-sms:subscriptions:read
      responses:
        "200":
          description: List of event subscription details
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionInfo'
        "400":
          $ref: '#/components/responses/Generic400'
        "401":
          $ref: '#/components/responses/Generic401'
        "403":
          $ref: '#/components/responses/Generic403'
        "500":
          $ref: '#/components/responses/Generic500'
        "503":
          $ref: '#/components/responses/Generic503'
  /subscriptions/{subscriptionId}:
    get:
      tags:
        - SMS delivery notification subscription
      summary: 'Retrieve a sms delivery event subscription for a phone number'
      description: retrieve event subscription information for a given subscription.
      operationId: retrieveSubscription
      security:
        - openId:
          - send-sms:subscriptions:read
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"
        - $ref: '#/components/parameters/x-correlator'
      responses:
        "200":
          description: OK
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionInfo'
        "400":
          $ref: '#/components/responses/SubscriptionIdRequired'
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
    delete:
      tags:
        - SMS delivery notification subscription
      summary: 'Delete a sms delivery event subscription'
      operationId: deleteSubscription
      description: delete a given event subscription.
      security:
        - openId:
          - send-sms:subscriptions:delete
      parameters:
        - $ref: "#/components/parameters/SubscriptionId"
        - $ref: '#/components/parameters/x-correlator'
      responses:
        "204":
          description: event subscription deleted
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
        "202":
          description: Request accepted to be processed. It applies for async deletion process.
          headers:
            x-correlator:
              $ref: '#/components/headers/x-correlator'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionAsync'
        "400":
          $ref: '#/components/responses/SubscriptionIdRequired'
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/Generic404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
components:
  securitySchemes:
    openId:
      description: OpenID Connect authentication
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
  parameters:
    SubscriptionId:
      name: subscriptionId
      in: path
      description: Subscription identifier that was obtained from the create event subscription operation
      required: true
      schema:
        $ref: '#/components/schemas/SubscriptionId'
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation id for the different services
      schema:
        type: string
  headers:
    x-correlator:
      description: Correlation id for the different services
      schema:
        type: string
  schemas:
    SenderId:
      type: string
      description: "Identifer for the matching criteria basis which call back would be triggered by the server. In this case it would be the message sender id."
      example: 'AD-HDFCBK'

    MsgId:
      type: string
#      pattern: '^\+[1-9][0-9]{4,14}$'
      example: '56647d96-b3e6-48d2-b93f-ab0d56bdd965'
      description: "Every request from sender application to send SMS to recepient is acknowledged with a MsgId. This MsgId is sent in the call back."      

    Status:
      type: string
      example: 'SUCCESS'
      description: "Every request from sender application to send SMS to recepient is acknowledged with a MsgId. This MsgId is sent in the call back."
      enum:
        - SUCCESS
        - FAIL

    ErrorInfo:
      description: Error message object
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP response status code
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
        
    CreateSubscription:
      description: The request for creating a event-type event subscription
      type: object
      required:
        - sink
        - protocol
        - config
        - types
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          type: string
          format: url
          description: The address to which events shall be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        sinkCredential:
          description: A sink credential provides authentication or authorization information necessary to enable delivery of events to a target.
          allOf:
            - description: A sink credential provides authentication or authorization information necessary to enable delivery of events to a target.
            - $ref: "#/components/schemas/SinkCredential"
        types:
          description: |
            Camara Event types eligible to be delivered by this subscription.
            Note: As of now we enforce to have only event type per subscription.
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: "#/components/schemas/SmsDeliveryNotificationEventType"
        config:
          $ref: "#/components/schemas/Config"
      discriminator:
        propertyName: protocol
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionRequest"
          MQTT3: "#/components/schemas/MQTTSubscriptionRequest"
          MQTT5: "#/components/schemas/MQTTSubscriptionRequest"
          AMQP: "#/components/schemas/AMQPSubscriptionRequest"
          NATS: "#/components/schemas/NATSSubscriptionRequest"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionRequest"

    Protocol:
      type: string
      enum: ["HTTP", "MQTT3", "MQTT5", "AMQP", "NATS", "KAFKA"]
      description: Identifier of a delivery protocol. Only HTTP is allowed for now
      example: "HTTP"

    Config:
      description: |
        Implementation-specific configuration parameters needed by the subscription manager for acquiring events.
        In CAMARA we have predefined attributes like `subscriptionExpireTime`, `subscriptionMaxEvents`, `initialEvent`
        Specific event type attributes must be defined in `subscriptionDetail`
        Note: if a request is performed for several event type, all subscribed event will use same `config` parameters.
      type: object
      required:
        - subscriptionDetail
      properties:
        subscriptionDetail:
          $ref: "#/components/schemas/SubscriptionDetail"
        subscriptionExpireTime:
          type: string
          format: date-time
          example: 2023-01-17T13:18:23.682Z
          description: The subscription expiration time (in date-time format) requested by the API consumer.
        subscriptionMaxEvents:
          type: integer
          description: Identifies the maximum number of event reports to be generated (>=1) requested by the API consumer - Once this number is reached, the subscription ends.
          minimum: 1
          example: 5
        initialEvent:
          type: boolean
          description: |
            Set to `true` by API consumer if consumer wants to get an event as soon as the subscription is created and current situation reflects event request.
            Example: Consumer request area entered event. If consumer sets initialEvent to true and device is already in the geofence, an event is triggered

    SinkCredential:
      description: Sink credential
      type: object
      properties:
        credentialType:
          type: string
          enum:
            - PLAIN
            - ACCESSTOKEN
            - REFRESHTOKEN
          description: "The type of the credential."
      discriminator:
        propertyName: credentialType
        mapping:
          PLAIN: "#/components/schemas/PlainCredential"
          ACCESSTOKEN: "#/components/schemas/AccessTokenCredential"
          REFRESHTOKEN: "#/components/schemas/RefreshTokenCredential"
      required:
        - credentialType
    PlainCredential:
      type: object
      description: A plain credential as a combination of an identifier and a secret.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          required:
            - identifier
            - secret
          properties:
            identifier:
              description: The identifier might be an account or username.
              type: string
            secret:
              description: The secret might be a password or passphrase.
              type: string
    AccessTokenCredential:
      type: object
      description: An access token credential.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: REQUIRED. An absolute UTC instant at which the token shall be considered expired.
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)).
              type: string
              enum:
                - bearer
          required:
            - accessToken
            - accessTokenExpiresUtc
            - accessTokenType
    RefreshTokenCredential:
      type: object
      description: An access token credential with a refresh token.
      allOf:
        - $ref: "#/components/schemas/SinkCredential"
        - type: object
          properties:
            accessToken:
              description: REQUIRED. An access token is a previously acquired token granting access to the target resource.
              type: string
            accessTokenExpiresUtc:
              type: string
              format: date-time
              description: REQUIRED. An absolute UTC instant at which the token shall be considered expired.
            accessTokenType:
              description: REQUIRED. Type of the access token (See [OAuth 2.0](https://tools.ietf.org/html/rfc6749#section-7.1)).
              type: string
              enum:
                - bearer
            refreshToken:
              description: REQUIRED. An refresh token credential used to acquire access tokens.
              type: string
            refreshTokenEndpoint:
              type: string
              format: uri
              description: REQUIRED. A URL at which the refresh token can be traded for an access token.
      required:
        - accessToken
        - accessTokenExpiresUtc
        - accessTokenType
        - refreshToken
        - refreshTokenEndpoint

    SubscriptionDetail:
      type: object
      description: The detail of the requested event subscription
      required:
        - senderId
        - type
      properties:
        senderId:
          $ref: '#/components/schemas/SenderId'
        type:
          $ref: '#/components/schemas/SmsDeliveryNotificationEventType'

#    CreateSubscriptionDetail:
#      description: The detail of the requested event subscription
#      type: object
#      required:
#        - type
#      properties:
#        msgId:
#          $ref: '#/components/schemas/MsgId'
#        type:
#          $ref: '#/components/schemas/SendSMSEventType'

#    SendSMSEventType:
#      type: string
#      description: |
#        sms-delivery-status - Event triggered when a sms-delivery action is complete and delivery status is to be returned back.

#      enum:
#        - org.camaraproject.sms.v0.sms-delivery-status

    SmsDeliveryNotificationEventType:
      type: string
      description: |
        sms-delivery - Event triggered after sms-delivery task is complete. This sms-delivery tasks completion may have status/outcome as success or failure which is returned back in callback to the requestor.

      enum:
        - org.camaraproject.sms.v0.sms-delivery-status
        - org.camaraproject.sms.v0.subscription-ends

    SubscriptionInfo:
      description: Represents a event-type subscription.
      type: object
      required:
        - sink
        - protocol
        - config
        - types
        - id
        - startsAt
      properties:
        protocol:
          $ref: "#/components/schemas/Protocol"
        sink:
          type: string
          format: url
          description: The address to which events shall be delivered using the selected protocol.
          example: "https://endpoint.example.com/sink"
        sinkCredential:
          $ref: "#/components/schemas/SinkCredential"
        types:
          description: |
            Camara Event types eligible to be delivered by this subscription.
          type: array
          items:
            type: string
        config:
          $ref: "#/components/schemas/Config"
        id:
          type: string
          description: The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).
          example: "1119920371"
        startsAt:
          type: string
          format: date-time
          description: Date when the event subscription will begin/began
        expiresAt:
          type: string
          format: date-time
          description: Date when the event subscription will expire. Only provided when `subscriptionExpireTime` is indicated by API client or Telco Operator has specific policy about that.
        status:
          type: string
          description: |-
            Current status of the subscription - Management of Subscription State engine is not mandatory for now. Note not all statuses may be considered to be implemented. Details:
              - `ACTIVATION_REQUESTED`: Subscription creation (POST) is triggered but subscription creation process is not finished yet.
              - `ACTIVE`: Subscription creation process is completed. Subscription is fully operative.
              - `INACTIVE`: Subscription is temporarily inactive, but its workflow logic is not deleted.
              - `EXPIRED`: Subscription is ended (no longer active). This status applies when subscription is ended due to `SUBSCRIPTION_EXPIRED` or `ACCESS_TOKEN_EXPIRED` event.
              - `DELETED`: Subscription is ended as deleted (no longer active). This status applies when subscription information is kept (i.e. subscription workflow is no longer active but its meta-information is kept).
          enum:
            - ACTIVATION_REQUESTED
            - ACTIVE
            - EXPIRED
            - INACTIVE
            - DELETED
      discriminator:
        propertyName: protocol
        mapping:
          HTTP: "#/components/schemas/HTTPSubscriptionResponse"
          MQTT3: "#/components/schemas/MQTTSubscriptionResponse"
          MQTT5: "#/components/schemas/MQTTSubscriptionResponse"
          AMQP: "#/components/schemas/AMQPSubscriptionResponse"
          NATS: "#/components/schemas/NATSSubscriptionResponse"
          KAFKA: "#/components/schemas/ApacheKafkaSubscriptionResponse"

    SubscriptionAsync:
      description: Response for a event-type subscription request managed asynchronously (Creation or Deletion)
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SubscriptionId"

    SubscriptionId:
      type: string
      description: The unique identifier of the subscription in the scope of the subscription manager. When this information is contained within an event notification, this concept SHALL be referred as `subscriptionId` as per [Commonalities Event Notification Model](https://github.com/camaraproject/Commonalities/blob/main/documentation/API-design-guidelines.md#122-event-notification).
      example: qs15-h556-rt89-1298

    CloudEvent:
      description: The notification callback
      required:
        - id
        - source
        - specversion
        - type
        - data
      properties:
        id:
          type: string
          description: identifier of this event, that must be unique in the source context.
        source:
          $ref: '#/components/schemas/Source'
        type:
          $ref: '#/components/schemas/SmsDeliveryNotificationEventType'
        specversion:
          type: string
          description: Version of the specification to which this event conforms (must be 1.0 if it conforms to cloudevents 1.0.2 version)
          example: '1.0'
        datacontenttype:
          type: string
          description: 'media-type that describes the event payload encoding, must be "application/json" for CAMARA APIs'
          example: application/json
        data:
          type: object
          description: Event details payload described in each CAMARA API and referenced by its type
        time:
          $ref: "#/components/schemas/DateTime"
      discriminator:
        propertyName: 'type'
        mapping:
            org.camaraproject.sms.v0.sms-delivery-status: '#/components/schemas/EventSimSwap'
            org.camaraproject.sms.v0.subscription-ends: '#/components/schemas/EventSimSwapSubscriptionEnds'

    Source:
      type: string
      format: uri-reference
      minLength: 1
      description: |
        Identifies the context in which an event happened - be a non-empty `URI-reference` like:
        - URI with a DNS authority:
          * https://github.com/cloudevents
          * mailto:cncf-wg-serverless@lists.cncf.io
        - Universally-unique URN with a UUID:
          * urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66
        - Application-specific identifier:
          * /cloudevents/spec/pull/123
          * 1-555-123-4567
      example: "https://notificationSendServer12.supertelco.com"


    DateTime:
      type: string
      format: date-time
      description: Timestamp of when the occurrence happened. Must adhere to RFC 3339.
      example: '2018-04-05T17:31:00Z'

    DeliveryStatus:
      description: Event detail structure for SMS Delivery event.
      type : object
      required:
        - msgId
        - subscriptionId
      properties:
        msgId:
          $ref: '#/components/schemas/MsgId'
        status:
          $ref: '#/components/schemas/Status'
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"

    SubscriptionEnds:
      description: Event detail structure for SUBSCRIPTION_ENDS event
      type : object
      required:
        - msgId
        - terminationReason
        - subscriptionId
      properties:
        msgId:
          $ref: '#/components/schemas/MsgId'
        subscriptionId:
          $ref: "#/components/schemas/SubscriptionId"
        terminationReason:
          $ref: "#/components/schemas/TerminationReason"
        terminationDescription:
          description: termination description
          type: string

    TerminationReason:
      type: string
      description: |
        - NETWORK_TERMINATED - API server stopped sending notification
        - SUBSCRIPTION_EXPIRED - Subscription expire time (optionally set by the requester) has been reached
        - MAX_EVENTS_REACHED - Maximum number of events (optionally set by the requester) has been reached

      enum:
        - MAX_EVENTS_REACHED
        - NETWORK_TERMINATED
        - SUBSCRIPTION_EXPIRED


  responses:
    Generic400:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: "INVALID_ARGUMENT"
            message: "Client specified an invalid argument, request body or query param"
    Generic401:
      description: Authentication problem with the client request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: "UNAUTHENTICATED"
            message: "Request not authenticated due to missing, invalid, or expired credentials"
    Generic403:
      description: Client does not have sufficient permission
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 403
            code: "PERMISSION_DENIED"
            message: "Client does not have sufficient permissions to perform this action"
    Generic404:
      description: Resource Not Found
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 404
            code: NOT_FOUND
            message: "The specified resource is not found"
    Generic409:
      description: Conflict
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 409
            code: CONFLICT
            message: "The specified resource is in a conflict"
    Generic500:
      description: Server error
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: "INTERNAL"
            message: "Server error"
    Generic503:
      description: Service unavailable. Typically the server is down.
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: "UNAVAILABLE"
            message: "Service unavailable"
    SubscriptionIdRequired:
      description: Problem with the client request
      headers:
        x-correlator:
          $ref: '#/components/headers/x-correlator'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          examples:
            Generic400:
              summary: Schema validation failed
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Client specified an invalid argument, request body or query param"
            subscriptionIdRequired:
              summary: subscription id is required
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Expected property is missing: subscriptionId"
  examples:
    STATUS:
      description: Example of Status
      value:
        id: '123655'
        source: supertelco.notificationSendServer12
        type: org.camaraproject.sms.v0.sms-delivery-status
        specversion: "1.0"
        datacontenttype: application/json
        data: 
            msgId: 56647d96-b3e6-48d2-b93f-ab0d56bdd965
            subscriptionId: 2ghy-55gg-7iup-yuo9
        time: 2023-01-18T13:18:23.682Z

    SUBSCRIPTION_ENDS:
      description: example for subscription ends
      value:
        id: '123658'
        source: supertelco.notificationSendServer12
        type: org.camaraproject.sms.v0.subscription-ends
        specversion: "1.0"
        datacontenttype: application/json
        data: 
            phoneNumber: +123456789
            terminationReason: SUBSCRIPTION_EXPIRED
            subscriptionId: 2ghy-55gg-7iup-yuo9
            terminationDescription: subscription expire time reached
        time: 2023-01-19T13:18:23.682Z
